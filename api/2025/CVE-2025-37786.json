{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-05-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: net: dsa: free routing table on probe failure",
    "id": "2363302",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2363302"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-37786",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nnet: dsa: free routing table on probe failure\nIf complete = true in dsa_tree_setup(), it means that we are the last\nswitch of the tree which is successfully probing, and we should be\nsetting up all switches from our probe path.\nAfter \"complete\" becomes true, dsa_tree_setup_cpu_ports() or any\nsubsequent function may fail. If that happens, the entire tree setup is\nin limbo: the first N-1 switches have successfully finished probing\n(doing nothing but having allocated persistent memory in the tree's\ndst-\u003eports, and maybe dst-\u003ertable), and switch N failed to probe, ending\nthe tree setup process before anything is tangible from the user's PoV.\nIf switch N fails to probe, its memory (ports) will be freed and removed\nfrom dst-\u003eports. However, the dst-\u003ertable elements pointing to its ports,\nas created by dsa_link_touch(), will remain there, and will lead to\nuse-after-free if dereferenced.\nIf dsa_tree_setup_switches() returns -EPROBE_DEFER, which is entirely\npossible because that is where ds-\u003eops-\u003esetup() is, we get a kasan\nreport like this:\n==================================================================\nBUG: KASAN: slab-use-after-free in mv88e6xxx_setup_upstream_port+0x240/0x568\nRead of size 8 at addr ffff000004f56020 by task kworker/u8:3/42\nCall trace:\n__asan_report_load8_noabort+0x20/0x30\nmv88e6xxx_setup_upstream_port+0x240/0x568\nmv88e6xxx_setup+0xebc/0x1eb0\ndsa_register_switch+0x1af4/0x2ae0\nmv88e6xxx_register_switch+0x1b8/0x2a8\nmv88e6xxx_probe+0xc4c/0xf60\nmdio_probe+0x78/0xb8\nreally_probe+0x2b8/0x5a8\n__driver_probe_device+0x164/0x298\ndriver_probe_device+0x78/0x258\n__device_attach_driver+0x274/0x350\nAllocated by task 42:\n__kasan_kmalloc+0x84/0xa0\n__kmalloc_cache_noprof+0x298/0x490\ndsa_switch_touch_ports+0x174/0x3d8\ndsa_register_switch+0x800/0x2ae0\nmv88e6xxx_register_switch+0x1b8/0x2a8\nmv88e6xxx_probe+0xc4c/0xf60\nmdio_probe+0x78/0xb8\nreally_probe+0x2b8/0x5a8\n__driver_probe_device+0x164/0x298\ndriver_probe_device+0x78/0x258\n__device_attach_driver+0x274/0x350\nFreed by task 42:\n__kasan_slab_free+0x48/0x68\nkfree+0x138/0x418\ndsa_register_switch+0x2694/0x2ae0\nmv88e6xxx_register_switch+0x1b8/0x2a8\nmv88e6xxx_probe+0xc4c/0xf60\nmdio_probe+0x78/0xb8\nreally_probe+0x2b8/0x5a8\n__driver_probe_device+0x164/0x298\ndriver_probe_device+0x78/0x258\n__device_attach_driver+0x274/0x350\nThe simplest way to fix the bug is to delete the routing table in its\nentirety. dsa_tree_setup_routing_table() has no problem in regenerating\nit even if we deleted links between ports other than those of switch N,\nbecause dsa_link_touch() first checks whether the port pair already\nexists in dst-\u003ertable, allocating if not.\nThe deletion of the routing table in its entirety already exists in\ndsa_tree_teardown(), so refactor that into a function that can also be\ncalled from the tree setup error path.\nIn my analysis of the commit to blame, it is the one which added\ndsa_link elements to dst-\u003ertable. Prior to that, each switch had its own\nds-\u003ertable which is freed when the switch fails to probe. But the tree\nis potentially persistent memory."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-37786\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-37786\nhttps://lore.kernel.org/linux-cve-announce/2025050118-CVE-2025-37786-cbe7@gregkh/T"
  ]
}