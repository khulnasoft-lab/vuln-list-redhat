{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-04-16T00:00:00Z",
  "bugzilla": {
    "description": "kernel: mm: zswap: fix crypto_free_acomp() deadlock in zswap_cpu_comp_dead()",
    "id": "2360305",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2360305"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-833",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-22030",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nmm: zswap: fix crypto_free_acomp() deadlock in zswap_cpu_comp_dead()\nCurrently, zswap_cpu_comp_dead() calls crypto_free_acomp() while holding\nthe per-CPU acomp_ctx mutex.  crypto_free_acomp() then holds scomp_lock\n(through crypto_exit_scomp_ops_async()).\nOn the other hand, crypto_alloc_acomp_node() holds the scomp_lock (through\ncrypto_scomp_init_tfm()), and then allocates memory.  If the allocation\nresults in reclaim, we may attempt to hold the per-CPU acomp_ctx mutex.\nThe above dependencies can cause an ABBA deadlock.  For example in the\nfollowing scenario:\n(1) Task A running on CPU #1:\ncrypto_alloc_acomp_node()\nHolds scomp_lock\nEnters reclaim\nReads per_cpu_ptr(pool-\u003eacomp_ctx, 1)\n(2) Task A is descheduled\n(3) CPU #1 goes offline\nzswap_cpu_comp_dead(CPU #1)\nHolds per_cpu_ptr(pool-\u003eacomp_ctx, 1))\nCalls crypto_free_acomp()\nWaits for scomp_lock\n(4) Task A running on CPU #2:\nWaits for per_cpu_ptr(pool-\u003eacomp_ctx, 1) // Read on CPU #1\nDEADLOCK\nSince there is no requirement to call crypto_free_acomp() with the per-CPU\nacomp_ctx mutex held in zswap_cpu_comp_dead(), move it after the mutex is\nunlocked.  Also move the acomp_request_free() and kfree() calls for\nconsistency and to avoid any potential sublte locking dependencies in the\nfuture.\nWith this, only setting acomp_ctx fields to NULL occurs with the mutex\nheld.  This is similar to how zswap_cpu_comp_prepare() only initializes\nacomp_ctx fields with the mutex held, after performing all allocations\nbefore holding the mutex.\nOpportunistically, move the NULL check on acomp_ctx so that it takes place\nbefore the mutex dereference."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-22030\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-22030\nhttps://lore.kernel.org/linux-cve-announce/2025041656-CVE-2025-22030-ff28@gregkh/T"
  ]
}