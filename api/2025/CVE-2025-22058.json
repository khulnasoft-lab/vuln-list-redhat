{
  "mitigation": "Mitigation for this issue is either not available or the currently available options don't meet the Red Hat Product Security criteria comprising ease of use and deployment, applicability to widespread installation base or stability.",
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Fix deferred",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Fix deferred",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-04-16T00:00:00Z",
  "bugzilla": {
    "description": "kernel: udp: Fix memory accounting leak.",
    "id": "2360276",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2360276"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "7.1",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "CWE-190",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-22058",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nudp: Fix memory accounting leak.\nMatt Dowling reported a weird UDP memory usage issue.\nUnder normal operation, the UDP memory usage reported in /proc/net/sockstat\nremains close to zero.  However, it occasionally spiked to 524,288 pages\nand never dropped.  Moreover, the value doubled when the application was\nterminated.  Finally, it caused intermittent packet drops.\nWe can reproduce the issue with the script below [0]:\n1. /proc/net/sockstat reports 0 pages\n# cat /proc/net/sockstat | grep UDP:\nUDP: inuse 1 mem 0\n2. Run the script till the report reaches 524,288\n# python3 test.py \u0026 sleep 5\n# cat /proc/net/sockstat | grep UDP:\nUDP: inuse 3 mem 524288  \u003c-- (INT_MAX + 1) \u003e\u003e PAGE_SHIFT\n3. Kill the socket and confirm the number never drops\n# pkill python3 \u0026\u0026 sleep 5\n# cat /proc/net/sockstat | grep UDP:\nUDP: inuse 1 mem 524288\n4. (necessary since v6.0) Trigger proto_memory_pcpu_drain()\n# python3 test.py \u0026 sleep 1 \u0026\u0026 pkill python3\n5. The number doubles\n# cat /proc/net/sockstat | grep UDP:\nUDP: inuse 1 mem 1048577\nThe application set INT_MAX to SO_RCVBUF, which triggered an integer\noverflow in udp_rmem_release().\nWhen a socket is close()d, udp_destruct_common() purges its receive\nqueue and sums up skb-\u003etruesize in the queue.  This total is calculated\nand stored in a local unsigned integer variable.\nThe total size is then passed to udp_rmem_release() to adjust memory\naccounting.  However, because the function takes a signed integer\nargument, the total size can wrap around, causing an overflow.\nThen, the released amount is calculated as follows:\n1) Add size to sk-\u003esk_forward_alloc.\n2) Round down sk-\u003esk_forward_alloc to the nearest lower multiple of\nPAGE_SIZE and assign it to amount.\n3) Subtract amount from sk-\u003esk_forward_alloc.\n4) Pass amount \u003e\u003e PAGE_SHIFT to __sk_mem_reduce_allocated().\nWhen the issue occurred, the total in udp_destruct_common() was 2147484480\n(INT_MAX + 833), which was cast to -2147482816 in udp_rmem_release().\nAt 1) sk-\u003esk_forward_alloc is changed from 3264 to -2147479552, and\n2) sets -2147479552 to amount.  3) reverts the wraparound, so we don't\nsee a warning in inet_sock_destruct().  However, udp_memory_allocated\nends up doubling at 4).\nSince commit 3cd3399dd7a8 (\"net: implement per-cpu reserves for\nmemory_allocated\"), memory usage no longer doubles immediately after\na socket is close()d because __sk_mem_reduce_allocated() caches the\namount in udp_memory_per_cpu_fw_alloc.  However, the next time a UDP\nsocket receives a packet, the subtraction takes effect, causing UDP\nmemory usage to double.\nThis issue makes further memory allocation fail once the socket's\nsk-\u003esk_rmem_alloc exceeds net.ipv4.udp_rmem_min, resulting in packet\ndrops.\nTo prevent this issue, let's use unsigned int for the calculation and\ncall sk_forward_alloc_add() only once for the small delta.\nNote that first_packet_length() also potentially has the same problem.\n[0]:\nfrom socket import *\nSO_RCVBUFFORCE = 33\nINT_MAX = (2 ** 31) - 1\ns = socket(AF_INET, SOCK_DGRAM)\ns.bind(('', 0))\ns.setsockopt(SOL_SOCKET, SO_RCVBUFFORCE, INT_MAX)\nc = socket(AF_INET, SOCK_DGRAM)\nc.connect(s.getsockname())\ndata = b'a' * 100\nwhile True:\nc.send(data)"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-22058\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-22058\nhttps://lore.kernel.org/linux-cve-announce/2025041606-CVE-2025-22058-045a@gregkh/T"
  ]
}