{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-05-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: f2fs: fix to avoid out-of-bounds access in f2fs_truncate_inode_blocks()",
    "id": "2363281",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2363281"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-37739",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nf2fs: fix to avoid out-of-bounds access in f2fs_truncate_inode_blocks()\nsyzbot reports an UBSAN issue as below:\n------------[ cut here ]------------\nUBSAN: array-index-out-of-bounds in fs/f2fs/node.h:381:10\nindex 18446744073709550692 is out of range for type '__le32[5]' (aka 'unsigned int[5]')\nCPU: 0 UID: 0 PID: 5318 Comm: syz.0.0 Not tainted 6.14.0-rc3-syzkaller-00060-g6537cfb395f3 #0\nCall Trace:\n\u003cTASK\u003e\n__dump_stack lib/dump_stack.c:94 [inline]\ndump_stack_lvl+0x241/0x360 lib/dump_stack.c:120\nubsan_epilogue lib/ubsan.c:231 [inline]\n__ubsan_handle_out_of_bounds+0x121/0x150 lib/ubsan.c:429\nget_nid fs/f2fs/node.h:381 [inline]\nf2fs_truncate_inode_blocks+0xa5e/0xf60 fs/f2fs/node.c:1181\nf2fs_do_truncate_blocks+0x782/0x1030 fs/f2fs/file.c:808\nf2fs_truncate_blocks+0x10d/0x300 fs/f2fs/file.c:836\nf2fs_truncate+0x417/0x720 fs/f2fs/file.c:886\nf2fs_file_write_iter+0x1bdb/0x2550 fs/f2fs/file.c:5093\naio_write+0x56b/0x7c0 fs/aio.c:1633\nio_submit_one+0x8a7/0x18a0 fs/aio.c:2052\n__do_sys_io_submit fs/aio.c:2111 [inline]\n__se_sys_io_submit+0x171/0x2e0 fs/aio.c:2081\ndo_syscall_x64 arch/x86/entry/common.c:52 [inline]\ndo_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\nentry_SYSCALL_64_after_hwframe+0x77/0x7f\nRIP: 0033:0x7f238798cde9\nindex 18446744073709550692 (decimal, unsigned long long)\n= 0xfffffffffffffc64 (hexadecimal, unsigned long long)\n= -924 (decimal, long long)\nIn f2fs_truncate_inode_blocks(), UBSAN detects that get_nid() tries to\naccess .i_nid[-924], it means both offset[0] and level should zero.\nThe possible case should be in f2fs_do_truncate_blocks(), we try to\ntruncate inode size to zero, however, dn.ofs_in_node is zero and\ndn.node_page is not an inode page, so it fails to truncate inode page,\nand then pass zeroed free_from to f2fs_truncate_inode_blocks(), result\nin this issue.\nif (dn.ofs_in_node || IS_INODE(dn.node_page)) {\nf2fs_truncate_data_blocks_range(\u0026dn, count);\nfree_from += count;\n}\nI guess the reason why dn.node_page is not an inode page could be: there\nare multiple nat entries share the same node block address, once the node\nblock address was reused, f2fs_get_node_page() may load a non-inode block.\nLet's add a sanity check for such condition to avoid out-of-bounds access\nissue."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-37739\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-37739\nhttps://lore.kernel.org/linux-cve-announce/2025050133-CVE-2025-37739-06bb@gregkh/T"
  ]
}