{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-04-16T00:00:00Z",
  "bugzilla": {
    "description": "kernel: exfat: fix random stack corruption after get_block",
    "id": "2360231",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2360231"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-22036",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nexfat: fix random stack corruption after get_block\nWhen get_block is called with a buffer_head allocated on the stack, such\nas do_mpage_readpage, stack corruption due to buffer_head UAF may occur in\nthe following race condition situation.\n\u003cCPU 0\u003e                      \u003cCPU 1\u003e\nmpage_read_folio\n\u003c\u003cbh on stack\u003e\u003e\ndo_mpage_readpage\nexfat_get_block\nbh_read\n__bh_read\nget_bh(bh)\nsubmit_bh\nwait_on_buffer\n...\nend_buffer_read_sync\n__end_buffer_read_notouch\nunlock_buffer\n\u003c\u003ckeep going\u003e\u003e\n...\n...\n...\n...\n\u003c\u003cbh is not valid out of mpage_read_folio\u003e\u003e\n.\n.\nanother_function\n\u003c\u003cvariable A on stack\u003e\u003e\nput_bh(bh)\natomic_dec(bh-\u003eb_count)\n* stack corruption here *\nThis patch returns -EAGAIN if a folio does not have buffers when bh_read\nneeds to be called. By doing this, the caller can fallback to functions\nlike block_read_full_folio(), create a buffer_head in the folio, and then\ncall get_block again.\nLet's do not call bh_read() with on-stack buffer_head."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-22036\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-22036\nhttps://lore.kernel.org/linux-cve-announce/2025041658-CVE-2025-22036-6469@gregkh/T"
  ]
}