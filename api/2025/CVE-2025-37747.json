{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Fix deferred",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Fix deferred",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-05-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: perf: Fix hang while freeing sigtrap event",
    "id": "2363311",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2363311"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-37747",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nperf: Fix hang while freeing sigtrap event\nPerf can hang while freeing a sigtrap event if a related deferred\nsignal hadn't managed to be sent before the file got closed:\nperf_event_overflow()\ntask_work_add(perf_pending_task)\nfput()\ntask_work_add(____fput())\ntask_work_run()\n____fput()\nperf_release()\nperf_event_release_kernel()\n_free_event()\nperf_pending_task_sync()\ntask_work_cancel() -\u003e FAILED\nrcuwait_wait_event()\nOnce task_work_run() is running, the list of pending callbacks is\nremoved from the task_struct and from this point on task_work_cancel()\ncan't remove any pending and not yet started work items, hence the\ntask_work_cancel() failure and the hang on rcuwait_wait_event().\nTask work could be changed to remove one work at a time, so a work\nrunning on the current task can always cancel a pending one, however\nthe wait / wake design is still subject to inverted dependencies when\nremote targets are involved, as pictured by Oleg:\nT1                                                      T2\nfd = perf_event_open(pid =\u003e T2-\u003epid);                  fd = perf_event_open(pid =\u003e T1-\u003epid);\nclose(fd)                                              close(fd)\n\u003cIRQ\u003e                                                  \u003cIRQ\u003e\nperf_event_overflow()                                  perf_event_overflow()\ntask_work_add(perf_pending_task)                        task_work_add(perf_pending_task)\n\u003c/IRQ\u003e                                                 \u003c/IRQ\u003e\nfput()                                                 fput()\ntask_work_add(____fput())                              task_work_add(____fput())\ntask_work_run()                                        task_work_run()\n____fput()                                             ____fput()\nperf_release()                                         perf_release()\nperf_event_release_kernel()                            perf_event_release_kernel()\n_free_event()                                          _free_event()\nperf_pending_task_sync()                               perf_pending_task_sync()\nrcuwait_wait_event()                                   rcuwait_wait_event()\nTherefore the only option left is to acquire the event reference count\nupon queueing the perf task work and release it from the task work, just\nlike it was done before 3a5465418f5f (\"perf: Fix event leak upon exec and file release\")\nbut without the leaks it fixed.\nSome adjustments are necessary to make it work:\n* A child event might dereference its parent upon freeing. Care must be\ntaken to release the parent last.\n* Some places assuming the event doesn't have any reference held and\ntherefore can be freed right away must instead put the reference and\nlet the reference counting to its job."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-37747\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-37747\nhttps://lore.kernel.org/linux-cve-announce/2025050135-CVE-2025-37747-6e35@gregkh/T"
  ]
}