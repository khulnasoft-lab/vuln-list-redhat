{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Fix deferred",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Fix deferred",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Low",
  "public_date": "2025-04-16T00:00:00Z",
  "bugzilla": {
    "description": "kernel: net: Remove RTNL dance for SIOCBRADDIF and SIOCBRDELIF.",
    "id": "2360257",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2360257"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2025-22111",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nnet: Remove RTNL dance for SIOCBRADDIF and SIOCBRDELIF.\nSIOCBRDELIF is passed to dev_ioctl() first and later forwarded to\nbr_ioctl_call(), which causes unnecessary RTNL dance and the splat\nbelow [0] under RTNL pressure.\nLet's say Thread A is trying to detach a device from a bridge and\nThread B is trying to remove the bridge.\nIn dev_ioctl(), Thread A bumps the bridge device's refcnt by\nnetdev_hold() and releases RTNL because the following br_ioctl_call()\nalso re-acquires RTNL.\nIn the race window, Thread B could acquire RTNL and try to remove\nthe bridge device.  Then, rtnl_unlock() by Thread B will release RTNL\nand wait for netdev_put() by Thread A.\nThread A, however, must hold RTNL after the unlock in dev_ifsioc(),\nwhich may take long under RTNL pressure, resulting in the splat by\nThread B.\nThread A (SIOCBRDELIF)           Thread B (SIOCBRDELBR)\n----------------------           ----------------------\nsock_ioctl                       sock_ioctl\n`- sock_do_ioctl                 `- br_ioctl_call\n`- dev_ioctl                     `- br_ioctl_stub\n|- rtnl_lock                     |\n|- dev_ifsioc                    '\n'  |- dev = __dev_get_by_name(...)\n|- netdev_hold(dev, ...)      .\n/   |- rtnl_unlock  ------.       |\n|   |- br_ioctl_call       `---\u003e  |- rtnl_lock\nRace |   |  `- br_ioctl_stub           |- br_del_bridge\nWindow   |     |                       |  |- dev = __dev_get_by_name(...)\n|   |     |  May take long        |  `- br_dev_delete(dev, ...)\n|   |     |  under RTNL pressure  |     `- unregister_netdevice_queue(dev, ...)\n|   |     |               |       `- rtnl_unlock\n\\   |     |- rtnl_lock  \u003c-'          `- netdev_run_todo\n|     |- ...                        `- netdev_run_todo\n|     `- rtnl_unlock                   |- __rtnl_unlock\n|                                      |- netdev_wait_allrefs_any\n|- netdev_put(dev, ...)  \u003c----------------'\nWait refcnt decrement\nand log splat below\nTo avoid blocking SIOCBRDELBR unnecessarily, let's not call\ndev_ioctl() for SIOCBRADDIF and SIOCBRDELIF.\nIn the dev_ioctl() path, we do the following:\n1. Copy struct ifreq by get_user_ifreq in sock_do_ioctl()\n2. Check CAP_NET_ADMIN in dev_ioctl()\n3. Call dev_load() in dev_ioctl()\n4. Fetch the master dev from ifr.ifr_name in dev_ifsioc()\n3. can be done by request_module() in br_ioctl_call(), so we move\n1., 2., and 4. to br_ioctl_stub().\nNote that 2. is also checked later in add_del_if(), but it's better\nperformed before RTNL.\nSIOCBRADDIF and SIOCBRDELIF have been processed in dev_ioctl() since\nthe pre-git era, and there seems to be no specific reason to process\nthem there.\n[0]:\nunregister_netdevice: waiting for wpan3 to become free. Usage count = 2\nref_tracker: wpan3@ffff8880662d8608 has 1/1 users at\n__netdev_tracker_alloc include/linux/netdevice.h:4282 [inline]\nnetdev_hold include/linux/netdevice.h:4311 [inline]\ndev_ifsioc+0xc6a/0x1160 net/core/dev_ioctl.c:624\ndev_ioctl+0x255/0x10c0 net/core/dev_ioctl.c:826\nsock_do_ioctl+0x1ca/0x260 net/socket.c:1213\nsock_ioctl+0x23a/0x6c0 net/socket.c:1318\nvfs_ioctl fs/ioctl.c:51 [inline]\n__do_sys_ioctl fs/ioctl.c:906 [inline]\n__se_sys_ioctl fs/ioctl.c:892 [inline]\n__x64_sys_ioctl+0x1a4/0x210 fs/ioctl.c:892\ndo_syscall_x64 arch/x86/entry/common.c:52 [inline]\ndo_syscall_64+0xcb/0x250 arch/x86/entry/common.c:83\nentry_SYSCALL_64_after_hwframe+0x77/0x7f"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2025-22111\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-22111\nhttps://lore.kernel.org/linux-cve-announce/2025041624-CVE-2025-22111-8bec@gregkh/T"
  ]
}