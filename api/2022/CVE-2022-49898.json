{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Out of support scope",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-05-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: btrfs: fix tree mod log mishandling of reallocated nodes",
    "id": "2363425",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2363425"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-49898",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: fix tree mod log mishandling of reallocated nodes\nWe have been seeing the following panic in production\nkernel BUG at fs/btrfs/tree-mod-log.c:677!\ninvalid opcode: 0000 [#1] SMP\nRIP: 0010:tree_mod_log_rewind+0x1b4/0x200\nRSP: 0000:ffffc9002c02f890 EFLAGS: 00010293\nRAX: 0000000000000003 RBX: ffff8882b448c700 RCX: 0000000000000000\nRDX: 0000000000008000 RSI: 00000000000000a7 RDI: ffff88877d831c00\nRBP: 0000000000000002 R08: 000000000000009f R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000100c40 R12: 0000000000000001\nR13: ffff8886c26d6a00 R14: ffff88829f5424f8 R15: ffff88877d831a00\nFS:  00007fee1d80c780(0000) GS:ffff8890400c0000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fee1963a020 CR3: 0000000434f33002 CR4: 00000000007706e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\nbtrfs_get_old_root+0x12b/0x420\nbtrfs_search_old_slot+0x64/0x2f0\n? tree_mod_log_oldest_root+0x3d/0xf0\nresolve_indirect_ref+0xfd/0x660\n? ulist_alloc+0x31/0x60\n? kmem_cache_alloc_trace+0x114/0x2c0\nfind_parent_nodes+0x97a/0x17e0\n? ulist_alloc+0x30/0x60\nbtrfs_find_all_roots_safe+0x97/0x150\niterate_extent_inodes+0x154/0x370\n? btrfs_search_path_in_tree+0x240/0x240\niterate_inodes_from_logical+0x98/0xd0\n? btrfs_search_path_in_tree+0x240/0x240\nbtrfs_ioctl_logical_to_ino+0xd9/0x180\nbtrfs_ioctl+0xe2/0x2ec0\n? __mod_memcg_lruvec_state+0x3d/0x280\n? do_sys_openat2+0x6d/0x140\n? kretprobe_dispatcher+0x47/0x70\n? kretprobe_rethook_handler+0x38/0x50\n? rethook_trampoline_handler+0x82/0x140\n? arch_rethook_trampoline_callback+0x3b/0x50\n? kmem_cache_free+0xfb/0x270\n? do_sys_openat2+0xd5/0x140\n__x64_sys_ioctl+0x71/0xb0\ndo_syscall_64+0x2d/0x40\nWhich is this code in tree_mod_log_rewind()\nswitch (tm-\u003eop) {\ncase BTRFS_MOD_LOG_KEY_REMOVE_WHILE_FREEING:\nBUG_ON(tm-\u003eslot \u003c n);\nThis occurs because we replay the nodes in order that they happened, and\nwhen we do a REPLACE we will log a REMOVE_WHILE_FREEING for every slot,\nstarting at 0.  'n' here is the number of items in this block, which in\nthis case was 1, but we had 2 REMOVE_WHILE_FREEING operations.\nThe actual root cause of this was that we were replaying operations for\na block that shouldn't have been replayed.  Consider the following\nsequence of events\n1. We have an already modified root, and we do a btrfs_get_tree_mod_seq().\n2. We begin removing items from this root, triggering KEY_REPLACE for\nit's child slots.\n3. We remove one of the 2 children this root node points to, thus triggering\nthe root node promotion of the remaining child, and freeing this node.\n4. We modify a new root, and re-allocate the above node to the root node of\nthis other root.\nThe tree mod log looks something like this\nlogical 0op KEY_REPLACE (slot 1)seq 2\nlogical 0op KEY_REMOVE (slot 1)seq 3\nlogical 0op KEY_REMOVE_WHILE_FREEING (slot 0)seq 4\nlogical 4096op LOG_ROOT_REPLACE (old logical 0)seq 5\nlogical 8192op KEY_REMOVE_WHILE_FREEING (slot 1)seq 6\nlogical 8192op KEY_REMOVE_WHILE_FREEING (slot 0)seq 7\nlogical 0op LOG_ROOT_REPLACE (old logical 8192)seq 8\n\u003eFrom here the bug is triggered by the following steps\n1.  Call btrfs_get_old_root() on the new_root.\n2.  We call tree_mod_log_oldest_root(btrfs_root_node(new_root)), which is\ncurrently logical 0.\n3.  tree_mod_log_oldest_root() calls tree_mod_log_search_oldest(), which\ngives us the KEY_REPLACE seq 2, and since that's not a\nLOG_ROOT_REPLACE we incorrectly believe that we don't have an old\nroot, because we expect that the most recent change should be a\nLOG_ROOT_REPLACE.\n4.  Back in tree_mod_log_oldest_root() we don't have a LOG_ROOT_REPLACE,\nso we don't set old_root, we simply use our e\n---truncated---"
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2022-49898\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-49898\nhttps://lore.kernel.org/linux-cve-announce/2025050100-CVE-2022-49898-e08b@gregkh/T"
  ]
}