{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 7",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:7"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    },
    {
      "product_name": "Red Hat Enterprise Linux 9",
      "fix_state": "Not affected",
      "package_name": "kernel-rt",
      "cpe": "cpe:/o:redhat:enterprise_linux:9"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2025-05-01T00:00:00Z",
  "bugzilla": {
    "description": "kernel: riscv: fix reserved memory setup",
    "id": "2363500",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2363500"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.5",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "status": "draft"
  },
  "iava": "",
  "cwe": "",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-49851",
  "document_distribution": "",
  "details": [
    "In the Linux kernel, the following vulnerability has been resolved:\nriscv: fix reserved memory setup\nCurrently, RISC-V sets up reserved memory using the \"early\" copy of the\ndevice tree. As a result, when trying to get a reserved memory region\nusing of_reserved_mem_lookup(), the pointer to reserved memory regions\nis using the early, pre-virtual-memory address which causes a kernel\npanic when trying to use the buffer's name:\nUnable to handle kernel paging request at virtual address 00000000401c31ac\nOops [#1]\nModules linked in:\nCPU: 0 PID: 0 Comm: swapper Not tainted 6.0.0-rc1-00001-g0d9d6953d834 #1\nHardware name: Microchip PolarFire-SoC Icicle Kit (DT)\nepc : string+0x4a/0xea\nra : vsnprintf+0x1e4/0x336\nepc : ffffffff80335ea0 ra : ffffffff80338936 sp : ffffffff81203be0\ngp : ffffffff812e0a98 tp : ffffffff8120de40 t0 : 0000000000000000\nt1 : ffffffff81203e28 t2 : 7265736572203a46 s0 : ffffffff81203c20\ns1 : ffffffff81203e28 a0 : ffffffff81203d22 a1 : 0000000000000000\na2 : ffffffff81203d08 a3 : 0000000081203d21 a4 : ffffffffffffffff\na5 : 00000000401c31ac a6 : ffff0a00ffffff04 a7 : ffffffffffffffff\ns2 : ffffffff81203d08 s3 : ffffffff81203d00 s4 : 0000000000000008\ns5 : ffffffff000000ff s6 : 0000000000ffffff s7 : 00000000ffffff00\ns8 : ffffffff80d9821a s9 : ffffffff81203d22 s10: 0000000000000002\ns11: ffffffff80d9821c t3 : ffffffff812f3617 t4 : ffffffff812f3617\nt5 : ffffffff812f3618 t6 : ffffffff81203d08\nstatus: 0000000200000100 badaddr: 00000000401c31ac cause: 000000000000000d\n[\u003cffffffff80338936\u003e] vsnprintf+0x1e4/0x336\n[\u003cffffffff80055ae2\u003e] vprintk_store+0xf6/0x344\n[\u003cffffffff80055d86\u003e] vprintk_emit+0x56/0x192\n[\u003cffffffff80055ed8\u003e] vprintk_default+0x16/0x1e\n[\u003cffffffff800563d2\u003e] vprintk+0x72/0x80\n[\u003cffffffff806813b2\u003e] _printk+0x36/0x50\n[\u003cffffffff8068af48\u003e] print_reserved_mem+0x1c/0x24\n[\u003cffffffff808057ec\u003e] paging_init+0x528/0x5bc\n[\u003cffffffff808031ae\u003e] setup_arch+0xd0/0x592\n[\u003cffffffff8080070e\u003e] start_kernel+0x82/0x73c\nearly_init_fdt_scan_reserved_mem() takes no arguments as it operates on\ninitial_boot_params, which is populated by early_init_dt_verify(). On\nRISC-V, early_init_dt_verify() is called twice. Once, directly, in\nsetup_arch() if CONFIG_BUILTIN_DTB is not enabled and once indirectly,\nvery early in the boot process, by parse_dtb() when it calls\nearly_init_dt_scan_nodes().\nThis first call uses dtb_early_va to set initial_boot_params, which is\nnot usable later in the boot process when\nearly_init_fdt_scan_reserved_mem() is called. On arm64 for example, the\ncorresponding call to early_init_dt_scan_nodes() uses fixmap addresses\nand doesn't suffer the same fate.\nMove early_init_fdt_scan_reserved_mem() further along the boot sequence,\nafter the direct call to early_init_dt_verify() in setup_arch() so that\nthe names use the correct virtual memory addresses. The above supposed\nthat CONFIG_BUILTIN_DTB was not set, but should work equally in the case\nwhere it is - unflatted_and_copy_device_tree() also updates\ninitial_boot_params."
  ],
  "references": [
    "https://www.cve.org/CVERecord?id=CVE-2022-49851\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-49851\nhttps://lore.kernel.org/linux-cve-announce/2025050144-CVE-2022-49851-6309@gregkh/T"
  ]
}